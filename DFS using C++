#include<iostream>
using namespace std;

void Dfs_Traversal(int);
void Read_Input();
void DFS();
int arr[10][10],visited[10], vertex, source; 

int main()
{
   Read_Input();
   
   for(int i = 0 ; i < vertex ; i++ )          //initially visited for all vertices is zero
        visited[i]=0;
   
   cout << "After DFS Travarsal of the Graph: ";
   //Dfs_Traversal(source);
   DFS();
    return 0;
}

void DFS ()
{
    for ( int i = 0 ; i < vertex ; i++ )
        if(visited[i] == 0)             //for all vertices calling the traverse function 
            Dfs_Traversal(i);
}

 
void Dfs_Traversal(int i)
{
    
    int j, count=0;
	cout << i << " ";
    visited[i] = 1;         //identifying black vertex by 1 
    count++;
    
	for( j = 0 ; j < vertex ; j++)
    { 
        if(visited[j] != 1 && arr[i][j] == 1 )    // If vertex not visited and has an edge
            Dfs_Traversal(j);
    }
}

void Read_Input ()
{
    int i,j;
    cout << "Enter number of vertices: ";
    cin >> vertex;
 
	cout << "Enter the adjecency matrix of the graph: " << endl;
   
	for( i = 0 ; i < vertex ; i++ )
    {
        for( j = 0 ; j < vertex ; j++ )
		{
		    cin >> arr[i][j];
		}
    }
}


/*
4
0 1 0 0
0 0 1 0 
1 0 0 1
0 0 0 1

For DFS Forest input: 
8
0 1 0 1 1 0 0 0 
0 0 1 0 1 0 0 0 
1 0 0 0 0 0 0 0 
0 0 0 0 1 1 0 0 
0 0 1 0 0 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 0 1 0 0 0 
0 0 0 1 0 1 1 0 

*/




#include<iostream>
using namespace std;

void DFS();
void Dfs_Traversal(int i);
void Read_Input();
void Topologic();
void push(int a);
void pop();


int arr[10][10], visited[10], vertex, source;
int top = -1, Topo[10];

int main()
{
   Read_Input();
   
    for(int i = 0 ; i < vertex ; i++)          //initially visited for all vertices is zero
        visited[i]=0;
   
    cout << "After Topological sort of the graph: ";
   
    DFS();
    Topologic();
    return 0;
}
 
 
 
 void DFS ()
{
    for ( int i = 0 ; i < vertex ; i++ )
        if(visited[i] == 0)             //for all vertices calling the traverse function 
            Dfs_Traversal(i);
}

 
void Dfs_Traversal(int i)
{
    
    int j, count=0;
//	cout << i << " ";
    visited[i] = 1;         //identifying black vertex by 1 
    count++;
    
	for( j = 0 ; j < vertex ; j++)
    { 
        if(visited[j] != 1 && arr[i][j] == 1 )    // If vertex not visited and has an edge
            Dfs_Traversal(j);
    }

    push(i);
}

/* 
void Dfs_Traversal(int i)
{
    cout<<"DFS: "<<i<<endl;
    visited[i] = 1;         //identifying black vertex by 1 

	for(int j = 0 ; j < vertex ; j++)
    { 
        if(visited[j] != 1 && arr[i][j] == 1)    // If vertex not visited and has an edge
            Dfs_Traversal(j);
    }
    
}*/

void Topologic ()
{
    for(int i = vertex-1 ; i >= 0 ; i--)
        cout << Topo[i] << " ";
    
}

void push (int a)
{
    top++;
    Topo[top] = a;     
}


void Read_Input ()
{
    int i,j;
    cout << "Enter number of vertices: ";
    cin >> vertex;
 
	cout << "Enter the adjecency matrix of the graph: " << endl;
   
	for( i = 0 ; i < vertex ; i++ )
    {
        for( j = 0 ; j < vertex ; j++ )
		{
		    cin >> arr[i][j];
		}
    }
    
   // cout << "Enter the starting vertex: ";
   // cin >> source;
    
}


/*
4
0 1 0 0
0 0 1 0 
1 0 0 1
0 0 0 1


9
0 1 0 1 0 0 0 0 0  
0 0 1 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 
0 0 1 0 0 0 0 0 0 
0 0 0 0 0 0 0 0 0  
0 0 0 0 0 0 1 1 0
0 0 0 1 0 0 0 1 0
0 0 0 0 0 0 0 0 0 
0 0 0 0 0 0 0 1 0


5
0 1 1 0 0 
0 0 1 1 0 
0 0 0 1 1 
0 0 0 0 0 
0 0 0 0 0 

*/




